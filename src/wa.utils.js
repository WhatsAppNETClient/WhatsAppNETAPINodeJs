require("dotenv").config();const{CHROME_PATH:CHROME_PATH,SESSION_ID:SESSION_ID}=process.env,path=require("path"),fs=require("fs"),{waitFor:waitFor}=require("./utils"),{Client:Client,MessageMedia:MessageMedia}=require("whatsapp-web.js"),STATUS_BROADCAST="status@broadcast",SESSION_FILE_PATH=path.join(path.resolve("./session"),`${SESSION_ID}.json`),QRCODE_FILE_PATH=path.join(path.resolve("./session"),`qr_code_${SESSION_ID}.png`);let sessionCfg;fs.existsSync(SESSION_FILE_PATH)&&(sessionCfg=require(SESSION_FILE_PATH));const client=new Client({puppeteer:{headless:!0,executablePath:CHROME_PATH},session:sessionCfg}),{signalRClient:signalRClient,serverHub:serverHub}=require("./signalr.util"),qr=require("qr-image");client.on("qr",e=>{const s="- Scan QRCode...";console.log(s);var n=qr.imageSync(e,{type:"png"});fs.writeFileSync(QRCODE_FILE_PATH,n),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:s,sessionId:SESSION_ID})),signalRClient.connection.hub.invoke(serverHub,"ScanMe",JSON.stringify({qrcodePath:QRCODE_FILE_PATH,sessionId:SESSION_ID}))}),client.on("authenticated",e=>{const s="- Authenticated";console.log(s),fs.writeFile(SESSION_FILE_PATH,JSON.stringify(e),e=>{e&&console.error(e)}),fs.existsSync(QRCODE_FILE_PATH)&&fs.unlink(QRCODE_FILE_PATH,e=>{e&&console.log(e),console.log(`${QRCODE_FILE_PATH} is deleted!`)}),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:s,sessionId:SESSION_ID}))}),client.on("auth_failure",e=>{const s="- Authentication Failure\n- Session has been reset, please try again";console.log(s),console.log(`msg_failure: ${e}`),fs.rm(SESSION_FILE_PATH,{force:!0},e=>{e&&console.log(e),console.log(`${SESSION_FILE_PATH} is deleted!`),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:s,sessionId:SESSION_ID}))})}),client.on("ready",async()=>{let e="- WhatsApp Client Library for .NET Developer";console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),e=`- Copyright (C) 2020-${(new Date).getFullYear()}. Kamarudin`,console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),e="- http://wa-net.coding4ever.net/",console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),e=`- WhatsApp Web version ${await client.getWWebVersion()}`,console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),e=`- Chrome version ${(await client.pupPage.browser().version()).toString().split("/")[1]}`,console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),e=`- Current Phone Number:${client.info.wid.user}`,console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID})),await waitFor(4e3),e="- Ready",console.log(e),signalRClient.connection.hub.invoke(serverHub,"Startup",JSON.stringify({message:e,sessionId:SESSION_ID}))}),client.on("disconnected",e=>{console.log("Client was logged out",e)}),client.on("change_state",e=>{console.log("CHANGE STATE",e),signalRClient.connection.hub.invoke(serverHub,"ChangeState",JSON.stringify({state:e,sessionId:SESSION_ID}))}),client.on("change_battery",e=>{const{battery:s,plugged:n}=e;console.log(`Battery: ${s}% - Charging? ${n}`),signalRClient.connection.hub.invoke(serverHub,"ChangeBattery",JSON.stringify({battery:s,plugged:n,sessionId:SESSION_ID}))});const isStatusBroadcast=e=>!!e&&e===STATUS_BROADCAST,generateMessageId=()=>(new Date).getTime().toString(36)+Math.random().toString(36).slice(2),replyAsync=async(e,s,n,t)=>{let i=generateMessageId();try{if(!(!e.endsWith("@g.us")&&!isStatusBroadcast(e))||await t.isRegisteredUser(e)){const r=await t.sendMessage(e,s,{quotedMessageId:n}),{id:o}=r;return`true_${e}_${s}_${i=o.id}`}return`false_${e}_${s}_${i}`}catch(e){console.log("error ...."),console.log(e)}return`false_${e}_${s}_${i}`},sendTextAsync=async(e,s,n)=>{let t=generateMessageId();try{if(!(!e.endsWith("@g.us")&&!isStatusBroadcast(e))||await n.isRegisteredUser(e)){const i=await n.sendMessage(e,s),{id:r}=i;return`true_${e}_${s}_${t=r.id}`}return`false_${e}_${s}_${t}`}catch(e){console.log("error ...."),console.log(e)}return`false_${e}_${s}_${t}`},sendListOrButtonAsync=async(e,s,n,t)=>{let i=generateMessageId();try{if(!(!e.endsWith("@g.us")&&!isStatusBroadcast(e))||await t.isRegisteredUser(e)){const r=await t.sendMessage(e,s),{id:o}=r;return`true_${e}_${n}_${i=o.id}`}return`false_${e}_${n}_${i}`}catch(e){console.log("error ...."),console.log(e)}return`false_${e}_${n}_${i}`},sendImageOrFileAsync=async(e,s,n,t)=>{let i=generateMessageId();try{if(!(!e.endsWith("@g.us")&&!isStatusBroadcast(e))||await t.isRegisteredUser(e)){const r=MessageMedia.fromFilePath(s),o=await t.sendMessage(e,r,{caption:n}),{id:a}=o;return`true_${e}_${n}_${i=a.id}`}return`false_${e}_${n}_${i}`}catch(e){console.log(e)}return`false_${e}_${n}_${i}`},sendImageOrFileFromUrlAsync=async(e,s,n,t)=>{let i=generateMessageId();try{if(!(!e.endsWith("@g.us")&&!isStatusBroadcast(e))||await t.isRegisteredUser(e))try{const r=await MessageMedia.fromUrl(s),o=await t.sendMessage(e,r,{caption:n}),{id:a}=o;return`true_${e}_${n}_${i=a.id}`}catch(e){console.log(e)}return`false_${e}_${n}_${i}`}catch(e){console.log(e)}return`false_${e}_${n}_${i}`};module.exports={client:client,SESSION_FILE_PATH:SESSION_FILE_PATH,sendTextAsync:sendTextAsync,sendListOrButtonAsync:sendListOrButtonAsync,sendImageOrFileAsync:sendImageOrFileAsync,sendImageOrFileFromUrlAsync:sendImageOrFileFromUrlAsync,replyAsync:replyAsync};