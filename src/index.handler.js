require("dotenv").config();const path=require("path"),fs=require("fs"),mime=require("mime-types"),qr=require("qr-image"),{SESSION_ID:SESSION_ID,IMAGE_AND_DOCUMENT_PATH:IMAGE_AND_DOCUMENT_PATH}=process.env,waitFor=e=>new Promise(n=>setTimeout(n,e)),asyncForEach=async(e,n)=>{for(let t=0;t<e.length;t++)await n(e[t],t,e)},connectedHandler=()=>{const{client:e,SESSION_FILE_PATH:n}=require("./wa.utils"),{signalRClient:t,serverHub:i}=require("./signalr.util");path.join(path.resolve("./"),"logs");console.log("SignalR client connected."),t.connection.hub.invoke(i,"Startup","- Initialize...");(async()=>{try{await e.initialize()}catch(e){console.log("initialize error ...."),t.connection.hub.invoke(i,"Startup",new String(e))}})(),e.on("authenticated",e=>{const s="- Authenticated";console.log(s),sessionCfg=e,fs.writeFile(n,JSON.stringify(e),e=>{e&&console.error(e)}),t.connection.hub.invoke(i,"Startup",s)}),e.on("qr",e=>{const n="- Scan QRCode...";console.log(n);const s=path.join(path.resolve("./"),"session",`qr_code_${SESSION_ID}.png`);var a=qr.imageSync(e,{type:"png"});fs.writeFileSync(s,a),t.connection.hub.invoke(i,"Startup",n),t.connection.hub.invoke(i,"ScanMe",s)}),e.on("auth_failure",e=>{const n="- Authentication Failure";console.log(n),console.log(`msg_failure: ${e}`),t.connection.hub.invoke(i,"Startup",n)}),e.on("ready",()=>{console.log("- Ready"),t.connection.hub.invoke(i,"Startup","- Ready")}),e.on("disconnected",e=>{console.log("Client was logged out",e)}),e.on("message",async n=>{let s=await n.getChat();s.sendSeen(),console.log(`message: ${JSON.stringify(n)}`),console.log(""),console.log(`chat: ${JSON.stringify(s)}`);let a={},o="";n.hasMedia&&IMAGE_AND_DOCUMENT_PATH&&(o=(a=await n.downloadMedia()).mimetype);const r=await e.getContactById(n.from),c={id:`${n.id.remote}_${n.id.id}`,content:n.body?n.body:"",type:n.type?n.type:"",from:n.from?n.from:"",to:n.to?n.to:"",sender:{id:r.id._serialized?r.id._serialized:"",name:r.name?r.name:"",shortName:r.shortName?r.shortName:""},unixTimestamp:n.timestamp?n.timestamp:0,filename:n.hasMedia?`${n.timestamp}.${mime.extension(o)}`:""},l=JSON.stringify(c);if(t.connection.hub.invoke(i,"ReceiveMessage",l),n.hasMedia&&IMAGE_AND_DOCUMENT_PATH){const{data:e}=a,n=new Buffer.from(e,"base64");fs.writeFile(`${IMAGE_AND_DOCUMENT_PATH}\\${c.filename}`,n,e=>{e&&console.log(e),console.log("The file was saved!")})}})},onSendMessageHandler=async e=>{const{client:n,sendTextAsync:t,sendImageOrFileAsync:i}=require("./wa.utils"),{signalRClient:s,serverHub:a}=require("./signalr.util"),o=JSON.parse(e),{send_to:r,message:c,type:l,attachment:d}=o;if("image"===l||"file"===l){const e=await i(r,d,c,n);console.log(`result: ${JSON.stringify(e)}`);const t=e.toString().split("_"),[o,l,u]=t,g=JSON.stringify({status:o,send_to:l,message:u});s.connection.hub.invoke(a,"SendMessageStatus",g)}else{const e=await t(r,c,n);console.log(`result: ${JSON.stringify(e)}`);const i=e.toString().split("_"),[o,l,d]=i,u=JSON.stringify({status:o,send_to:l,message:d});s.connection.hub.invoke(a,"SendMessageStatus",u)}},onBroadcastMessageHandler=async(e,n)=>{const{client:t,sendTextAsync:i,sendImageOrFileAsync:s}=require("./wa.utils"),{signalRClient:a,serverHub:o}=require("./signalr.util"),r=JSON.parse(e);await asyncForEach(r,async e=>{const{send_to:r,message:c,type:l,attachment:d}=e;if("image"===l||"file"===l){const e=await s(r,d,c,t);console.log(`result: ${JSON.stringify(e)}`);const n=e.toString().split("_"),[i,l,u]=n,g=JSON.stringify({status:i,send_to:l,message:u});a.connection.hub.invoke(o,"SendMessageStatus",g)}else{const e=await i(r,c,t);console.log(`result: ${JSON.stringify(e)}`);const n=e.toString().split("_"),[s,l,d]=n,u=JSON.stringify({status:s,send_to:l,message:d});a.connection.hub.invoke(o,"SendMessageStatus",u)}await waitFor(n)})},onGrabContactHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util");let i=[];(await e.getContacts()).forEach(e=>{if(!e.isMe){const s=e.id._serialized.toString().split("@");if(s[0].length>5&&"c.us"===s[1]){const s={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:"",verifiedName:e.verifiedName?e.verifiedName:""};if("status@broadcast"!==s.id&&i.push(s),100===i.length){const e=JSON.stringify(i);n.connection.hub.invoke(t,"ReceiveContacts",e),i=[]}}}}),i.push({id:"status@broadcast"});const s=JSON.stringify(i);n.connection.hub.invoke(t,"ReceiveContacts",s)},onGrabGroupHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util");let i=[];(await e.getChats()).forEach(e=>{if(e.isGroup){let n=[];e.groupMetadata.participants.forEach(e=>{const t={id:e.id._serialized?e.id._serialized:"",name:"",shortName:""};n.push(t)});const t={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",members:n};i.push(t)}});let s=[];for(const a of i){for(const n of a.members){const t=await e.getContactById(n.id);n.name=t.name?t.name:"",n.shortName=t.shortName?t.shortName:""}if(s.push(a),10===s.length){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveGroups",e),s=[]}}s.push({id:"status@broadcast"});const a=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveGroups",a)},onArchiveChatHandler=async()=>{const{client:e}=require("./wa.utils"),n=await e.getChats();for(const e of n)await e.archive()},onDeleteChatHandler=async()=>{const{client:e}=require("./wa.utils"),n=await e.getChats();for(const e of n)await e.delete()},onGetUnreadMessageHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util"),i=await e.getChats();let s=[];for(const a of i)if(a.sendSeen(),a.unreadCount>0){const i=await a.fetchMessages({limit:a.unreadCount});for(const a of i){const i=await e.getContactById(a.from),o={id:`${a.from}_${a.id.id}`,content:a.body?a.body:"",type:a.type?a.type:"",from:a.from?a.from:"",to:a.to?a.to:"",sender:{id:i.id._serialized?i.id._serialized:"",name:i.name?i.name:"",shortName:i.shortName?i.shortName:""},unixTimestamp:a.timestamp?a.timestamp:0,filename:""};if(s.push(o),100===s.length){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveMessages",e),s=[]}}}if(s.length>0){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveMessages",e),s=[]}};module.exports={connectedHandler:connectedHandler,onSendMessageHandler:onSendMessageHandler,onBroadcastMessageHandler:onBroadcastMessageHandler,onGrabContactHandler:onGrabContactHandler,onGrabGroupHandler:onGrabGroupHandler,onArchiveChatHandler:onArchiveChatHandler,onDeleteChatHandler:onDeleteChatHandler,onGetUnreadMessageHandler:onGetUnreadMessageHandler};