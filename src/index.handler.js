require("dotenv").config();const mime=require("mime-types"),{vcardToJSON:vcardToJSON,waitFor:waitFor,asyncForEach:asyncForEach,saveMedia:saveMedia}=require("./utils"),{MessageTypes:MessageTypes}=require("whatsapp-web.js"),{IMAGE_AND_DOCUMENT_PATH:IMAGE_AND_DOCUMENT_PATH}=process.env,connectedHandler=()=>{const{client:e,SESSION_FILE_PATH:s}=require("./wa.utils"),{signalRClient:t,serverHub:a}=require("./signalr.util");console.log("SignalR client connected."),t.connection.hub.invoke(a,"Startup","- Initialize...");(async()=>{try{await e.initialize()}catch(e){console.log("initialize error ...."),t.connection.hub.invoke(a,"Startup",new String(e))}})(),e.on("message",async s=>{let n={};try{(n=await s.getChat()).sendSeen()}catch(e){console.log(`ex: ${e}`)}console.log(""),console.log(`type: ${s.type}`);let i={},o="";const r=s.hasMedia&&IMAGE_AND_DOCUMENT_PATH;if(r)try{o=(i=await s.downloadMedia()).mimetype}catch(e){console.log(`ex: ${e}`)}let c={};try{c=await e.getContactById(s.from)}catch(e){console.log(`ex: ${e}`)}const l={id:s.id._serialized,content:s.body?s.body:"",type:s.type?s.type:"",from:s.from?s.from:"",to:s.to?s.to:"",sender:{id:c.id._serialized?c.id._serialized:"",name:c.name?c.name:"",shortName:c.shortName?c.shortName:""},unixTimestamp:s.timestamp?s.timestamp:0,filename:r?`${s.timestamp}.${mime.extension(o)}`:"",location:s.type===MessageTypes.LOCATION?s.location:void 0,vcards:s.type===MessageTypes.CONTACT_CARD||s.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0,vcardFilenames:s.type===MessageTypes.CONTACT_CARD||s.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0};if(l.type!==MessageTypes.CONTACT_CARD&&l.type!==MessageTypes.CONTACT_CARD_MULTI&&l.type!==MessageTypes.LOCATION||(l.content=""),l.type===MessageTypes.CONTACT_CARD&&(l.vcards.push(vcardToJSON(s.body)),IMAGE_AND_DOCUMENT_PATH)){const{fn:e}=l.vcards[0],s=`${l.unixTimestamp}_${e}.vcf`;l.vcardFilenames.push(s)}if(l.type===MessageTypes.CONTACT_CARD_MULTI){let e=0;for(const t of s.vCards){if(l.vcards.push(vcardToJSON(t)),IMAGE_AND_DOCUMENT_PATH){const{fn:s}=l.vcards[e],t=`${l.unixTimestamp}_${s}.vcf`;l.vcardFilenames.push(t)}e++}}console.log(`message: ${JSON.stringify(s)}`),console.log(""),console.log(`msg: ${JSON.stringify(l)}`);const d=JSON.stringify(l);if(t.connection.hub.invoke(a,"ReceiveMessage",d),r){const{data:e}=i,s=new Buffer.from(e,"base64");saveMedia(IMAGE_AND_DOCUMENT_PATH,l.filename,s)}if(s.type===MessageTypes.CONTACT_CARD&&IMAGE_AND_DOCUMENT_PATH){const e=l.vcardFilenames[0];saveMedia(IMAGE_AND_DOCUMENT_PATH,e,s.body)}if(l.type===MessageTypes.CONTACT_CARD_MULTI&&IMAGE_AND_DOCUMENT_PATH){let e=0;for(const t of s.vCards){const s=l.vcardFilenames[e];saveMedia(IMAGE_AND_DOCUMENT_PATH,s,t),e++}}})},onSendMessageHandler=async e=>{const{client:s,sendTextAsync:t,sendImageOrFileAsync:a,sendImageOrFileFromUrlAsync:n,replyAsync:i}=require("./wa.utils"),{signalRClient:o,serverHub:r}=require("./signalr.util"),c=JSON.parse(e),{send_to:l,message:d,type:g,attachmentOrUrl:y,quotedMessageId:u}=c;if("image"===g||"file"===g){const e=(await a(l,y,d,s)).toString().split("_"),[t,n,i]=e,c=JSON.stringify({status:t,send_to:n,message:i});o.connection.hub.invoke(r,"SendMessageStatus",c)}else if("url"===g){const e=(await n(l,y,d,s)).toString().split("_"),[t,a,i]=e,c=JSON.stringify({status:t,send_to:a,message:i});o.connection.hub.invoke(r,"SendMessageStatus",c)}else{let e="";const a=(e=u?await i(l,d,u,s):await t(l,d,s)).toString().split("_"),[n,c,g]=a,y=JSON.stringify({status:n,send_to:c,message:g});o.connection.hub.invoke(r,"SendMessageStatus",y)}},onBroadcastMessageHandler=async(e,s)=>{const{client:t,sendTextAsync:a,sendImageOrFileAsync:n,sendImageOrFileFromUrlAsync:i}=require("./wa.utils"),{signalRClient:o,serverHub:r}=require("./signalr.util"),c=JSON.parse(e);await asyncForEach(c,async e=>{const{send_to:c,message:l,type:d,attachmentOrUrl:g}=e;if("image"===d||"file"===d){const e=(await n(c,g,l,t)).toString().split("_"),[s,a,i]=e,d=JSON.stringify({status:s,send_to:a,message:i});o.connection.hub.invoke(r,"SendMessageStatus",d)}else if("url"===d){const e=(await i(c,g,l,t)).toString().split("_"),[s,a,n]=e,d=JSON.stringify({status:s,send_to:a,message:n});o.connection.hub.invoke(r,"SendMessageStatus",d)}else{const e=(await a(c,l,t)).toString().split("_"),[s,n,i]=e,d=JSON.stringify({status:s,send_to:n,message:i});o.connection.hub.invoke(r,"SendMessageStatus",d)}await waitFor(s)})},onGrabContactHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:s,serverHub:t}=require("./signalr.util");let a=[];try{a=await e.getContacts()}catch(e){console.log(`ex: ${e}`)}let n=[];a.forEach(e=>{if(!e.isMe){const a=e.id._serialized.toString().split("@");if(a[0].length>5&&"c.us"===a[1]){const a={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:"",verifiedName:e.verifiedName?e.verifiedName:""};if("status@broadcast"!==a.id&&n.push(a),100===n.length){const e=JSON.stringify(n);s.connection.hub.invoke(t,"ReceiveContacts",e),n=[]}}}}),n.push({id:"status@broadcast"});const i=JSON.stringify(n);s.connection.hub.invoke(t,"ReceiveContacts",i)},onGrabGroupHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:s,serverHub:t}=require("./signalr.util");let a=[];try{a=await e.getChats()}catch(e){console.log(`ex: ${e}`)}let n=[];a.forEach(e=>{if(e.isGroup){let s=[];e.groupMetadata.participants.forEach(e=>{const t={id:e.id._serialized?e.id._serialized:"",name:"",shortName:""};s.push(t)});const t={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",members:s};n.push(t)}});let i=[];for(const a of n){for(const s of a.members)try{const t=await e.getContactById(s.id);s.name=t.name?t.name:"",s.shortName=t.shortName?t.shortName:""}catch(e){console.log("onGrabGroupHandler error ...."),console.log(`ex: ${e}`)}if(i.push(a),1===i.length){const e=JSON.stringify(i);s.connection.hub.invoke(t,"ReceiveGroups",e),i=[]}}i.push({id:"status@broadcast"});const o=JSON.stringify(i);s.connection.hub.invoke(t,"ReceiveGroups",o)},onArchiveChatHandler=async()=>{const{client:e}=require("./wa.utils"),s=await e.getChats();for(const e of s)await e.archive()},onDeleteChatHandler=async()=>{const{client:e}=require("./wa.utils"),s=await e.getChats();for(const e of s)await e.delete()},onGetUnreadMessageHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:s,serverHub:t}=require("./signalr.util"),a=await e.getChats();let n=[];for(const i of a)if(i.sendSeen(),i.unreadCount>0){const a=await i.fetchMessages({limit:i.unreadCount});for(const i of a){const a=await e.getContactById(i.from),o={id:i.id._serialized,content:i.body?i.body:"",type:i.type?i.type:"",from:i.from?i.from:"",to:i.to?i.to:"",sender:{id:a.id._serialized?a.id._serialized:"",name:a.name?a.name:"",shortName:a.shortName?a.shortName:""},unixTimestamp:i.timestamp?i.timestamp:0,filename:"",location:i.type===MessageTypes.LOCATION?i.location:void 0,vcards:i.type===MessageTypes.CONTACT_CARD||i.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0};if(o.type!==MessageTypes.CONTACT_CARD&&o.type!==MessageTypes.CONTACT_CARD_MULTI&&o.type!==MessageTypes.LOCATION||(o.content=""),o.type===MessageTypes.CONTACT_CARD&&o.vcards.push(vcardToJSON(i.body)),o.type===MessageTypes.CONTACT_CARD_MULTI)for(const e of i.vCards)o.vcards.push(vcardToJSON(e));if(console.log(`msg: ${JSON.stringify(o)}`),n.push(o),100===n.length){const e=JSON.stringify(n);s.connection.hub.invoke(t,"ReceiveMessages",e),n=[]}}}if(n.length>0){const e=JSON.stringify(n);s.connection.hub.invoke(t,"ReceiveMessages",e),n=[]}};module.exports={connectedHandler:connectedHandler,onSendMessageHandler:onSendMessageHandler,onBroadcastMessageHandler:onBroadcastMessageHandler,onGrabContactHandler:onGrabContactHandler,onGrabGroupHandler:onGrabGroupHandler,onArchiveChatHandler:onArchiveChatHandler,onDeleteChatHandler:onDeleteChatHandler,onGetUnreadMessageHandler:onGetUnreadMessageHandler};