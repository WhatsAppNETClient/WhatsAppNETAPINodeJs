require("dotenv").config();const path=require("path"),fs=require("fs"),mime=require("mime-types"),{vcardToJSON:vcardToJSON,waitFor:waitFor,asyncForEach:asyncForEach,saveMedia:saveMedia}=require("./utils"),{MessageTypes:MessageTypes,Location:Location}=require("whatsapp-web.js"),{SESSION_ID:SESSION_ID,IMAGE_AND_DOCUMENT_PATH:IMAGE_AND_DOCUMENT_PATH}=process.env,getContact=async(e,t)=>{let s=void 0;try{s=await t.getContactById(e)}catch(e){console.log(`ex: ${e}`)}return s},connectedHandler=()=>{const{client:e,SESSION_FILE_PATH:t}=require("./wa.utils"),{signalRClient:s,serverHub:a}=require("./signalr.util");console.log("SignalR client connected."),s.connection.hub.invoke(a,"Startup","- Initialize...");(async()=>{try{await e.initialize()}catch(e){console.log("initialize error ...."),s.connection.hub.invoke(a,"Startup",new String(e))}})(),e.on("message",async t=>{if("status@broadcast"===t.from)return void console.log("update status di skip aja");try{(await t.getChat()).sendSeen()}catch(e){console.log(`ex: ${e}`)}let n={},i="";const o=t.hasMedia&&IMAGE_AND_DOCUMENT_PATH;if(o)try{i=(n=await t.downloadMedia()).mimetype}catch(e){console.log(`ex: ${e}`)}const r=t.from.endsWith("@g.us"),c=await getContact(t.from,e);let l=void 0;r&&(l=await getContact(t.author,e));const d={id:t.id._serialized,content:t.body?t.body:"",type:t.type?t.type:"",from:t.from?t.from:"",to:t.to?t.to:"",sender:r?void 0:{id:c.id._serialized?c.id._serialized:"",name:c.name?c.name:"",shortName:c.shortName?c.shortName:""},group:r?{id:c.id._serialized?c.id._serialized:"",name:c.name?c.name:"",sender:{id:l.id._serialized?l.id._serialized:"",name:l.name?l.name:"",shortName:l.shortName?l.shortName:""}}:void 0,unixTimestamp:t.timestamp?t.timestamp:0,filename:o?`${t.timestamp}.${mime.extension(i)}`:"",location:t.type===MessageTypes.LOCATION?t.location:void 0,vcards:t.type===MessageTypes.CONTACT_CARD||t.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0,vcardFilenames:t.type===MessageTypes.CONTACT_CARD||t.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0};if(d.type!==MessageTypes.CONTACT_CARD&&d.type!==MessageTypes.CONTACT_CARD_MULTI&&d.type!==MessageTypes.LOCATION||(d.content=""),d.type===MessageTypes.CONTACT_CARD&&(d.vcards.push(vcardToJSON(t.body)),IMAGE_AND_DOCUMENT_PATH)){const{fn:e}=d.vcards[0],t=`${d.unixTimestamp}_${e}.vcf`;d.vcardFilenames.push(t)}if(d.type===MessageTypes.CONTACT_CARD_MULTI){let e=0;for(const s of t.vCards){if(d.vcards.push(vcardToJSON(s)),IMAGE_AND_DOCUMENT_PATH){const{fn:t}=d.vcards[e],s=`${d.unixTimestamp}_${t}.vcf`;d.vcardFilenames.push(s)}e++}}const u=JSON.stringify(d);if(s.connection.hub.invoke(a,"ReceiveMessage",u),o){const{data:e}=n,t=new Buffer.from(e,"base64");saveMedia(IMAGE_AND_DOCUMENT_PATH,d.filename,t)}if(t.type===MessageTypes.CONTACT_CARD&&IMAGE_AND_DOCUMENT_PATH){const e=d.vcardFilenames[0];saveMedia(IMAGE_AND_DOCUMENT_PATH,e,t.body)}if(d.type===MessageTypes.CONTACT_CARD_MULTI&&IMAGE_AND_DOCUMENT_PATH){let e=0;for(const s of t.vCards){const t=d.vcardFilenames[e];saveMedia(IMAGE_AND_DOCUMENT_PATH,t,s),e++}}})},onSendMessageHandler=async e=>{const{client:t,sendTextAsync:s,sendImageOrFileAsync:a,sendImageOrFileFromUrlAsync:n,replyAsync:i}=require("./wa.utils"),{signalRClient:o,serverHub:r}=require("./signalr.util"),c=JSON.parse(e),{send_to:l,message:d,type:u,attachmentOrUrl:g,quotedMessageId:m}=c;if("image"===u||"file"===u){const e=(await a(l,g,d,t)).toString().split("_"),[s,n,i]=e,c=JSON.stringify({status:s,send_to:n,message:i});o.connection.hub.invoke(r,"SendMessageStatus",c)}else if("url"===u){const e=(await n(l,g,d,t)).toString().split("_"),[s,a,i]=e,c=JSON.stringify({status:s,send_to:a,message:i});o.connection.hub.invoke(r,"SendMessageStatus",c)}else if("location"===u){const e=JSON.parse(d),a=new Location(e.latitude,e.longitude,e.description);let n="";const c=(n=m?await i(l,a,m,t):await s(l,a,t)).toString().split("_"),[u,g,p]=c,y=JSON.stringify({status:u,send_to:g,message:p});o.connection.hub.invoke(r,"SendMessageStatus",y)}else{let e="";const a=(e=m?await i(l,d,m,t):await s(l,d,t)).toString().split("_"),[n,c,u]=a,g=JSON.stringify({status:n,send_to:c,message:u});o.connection.hub.invoke(r,"SendMessageStatus",g)}},onBroadcastMessageHandler=async(e,t)=>{const{client:s,sendTextAsync:a,sendImageOrFileAsync:n,sendImageOrFileFromUrlAsync:i}=require("./wa.utils"),{signalRClient:o,serverHub:r}=require("./signalr.util"),c=JSON.parse(e);await asyncForEach(c,async e=>{const{send_to:c,message:l,type:d,attachmentOrUrl:u}=e;if("image"===d||"file"===d){const e=(await n(c,u,l,s)).toString().split("_"),[t,a,i]=e,d=JSON.stringify({status:t,send_to:a,message:i});o.connection.hub.invoke(r,"SendMessageStatus",d)}else if("url"===d){const e=(await i(c,u,l,s)).toString().split("_"),[t,a,n]=e,d=JSON.stringify({status:t,send_to:a,message:n});o.connection.hub.invoke(r,"SendMessageStatus",d)}else if("location"===d){const e=JSON.parse(l),t=new Location(e.latitude,e.longitude,e.description),n=(await a(c,t,s)).toString().split("_"),[i,d,u]=n,g=JSON.stringify({status:i,send_to:d,message:u});o.connection.hub.invoke(r,"SendMessageStatus",g)}else{const e=(await a(c,l,s)).toString().split("_"),[t,n,i]=e,d=JSON.stringify({status:t,send_to:n,message:i});o.connection.hub.invoke(r,"SendMessageStatus",d)}await waitFor(t)})},onGrabContactHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:s}=require("./signalr.util");let a=[];try{a=await e.getContacts()}catch(e){console.log(`ex: ${e}`)}let n=[];a.forEach(e=>{if(!e.isMe){const a=e.id._serialized.toString().split("@");if(a[0].length>5&&"c.us"===a[1]){const a={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:"",verifiedName:e.verifiedName?e.verifiedName:""};if("status@broadcast"!==a.id&&n.push(a),100===n.length){const e=JSON.stringify(n);t.connection.hub.invoke(s,"ReceiveContacts",e),n=[]}}}}),n.push({id:"status@broadcast"});const i=JSON.stringify(n);t.connection.hub.invoke(s,"ReceiveContacts",i)},onGrabGroupHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:s}=require("./signalr.util");let a=[];try{a=await e.getChats()}catch(e){console.log(`ex: ${e}`)}let n=[];a.forEach(e=>{if(e.isGroup){const t={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:""};n.push(t)}}),n.push({id:"status@broadcast"});const i=JSON.stringify(n);t.connection.hub.invoke(s,"ReceiveGroups",i)},onGrabGroupAndMemberHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:s}=require("./signalr.util");let a=[];try{a=await e.getChats()}catch(e){console.log(`ex: ${e}`)}let n=[];a.forEach(e=>{if(e.isGroup){let t=[];e.groupMetadata.participants.forEach(e=>{const s={id:e.id._serialized?e.id._serialized:"",name:"",shortName:""};t.push(s)});const s={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",members:t};n.push(s)}});let i=[];for(const a of n){for(const t of a.members)try{const s=await getContact(t.id,e);t.name=s.name?s.name:"",t.shortName=s.shortName?s.shortName:""}catch(e){console.log("onGrabGroupAndMemberHandler error ...."),console.log(`ex: ${e}`)}if(i.push(a),1===i.length){const e=JSON.stringify(i);t.connection.hub.invoke(s,"ReceiveGroups",e),i=[]}}i.push({id:"status@broadcast"});const o=JSON.stringify(i);t.connection.hub.invoke(s,"ReceiveGroups",o)},onArchiveChatHandler=async()=>{const{client:e}=require("./wa.utils"),t=await e.getChats();for(const e of t)await e.archive()},onDeleteChatHandler=async()=>{const{client:e}=require("./wa.utils"),t=await e.getChats();for(const e of t)await e.delete()},onDisconnectHandler=async()=>{const{signalRClient:e}=require("./signalr.util"),{client:t}=require("./wa.utils");try{await t.destroy()}catch(e){console.log(`ex: ${e}`)}setTimeout(()=>process.exit(),500),e.end()},onLogoutHandler=async()=>{const{signalRClient:e}=require("./signalr.util"),{client:t}=require("./wa.utils");try{await t.logout();const e=path.join(path.resolve("./session"),`${SESSION_ID}.json`);fs.rm(e,{force:!0},t=>{t&&console.log(t),console.log(`${e} is deleted!`)})}catch(e){console.log(`ex: ${e}`)}setTimeout(()=>process.exit(),500),e.end()},onGetUnreadMessageHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:s}=require("./signalr.util");let a=[];try{a=await e.getChats()}catch(e){console.log(`ex: ${e}`)}let n=[];for(const i of a)if(i.sendSeen(),i.unreadCount>0){const a=await i.fetchMessages({limit:i.unreadCount});for(const i of a){const a=i.from.endsWith("@g.us"),o=await getContact(i.from,e);let r=void 0;a&&(r=await getContact(i.author,e));const c={id:i.id._serialized,content:i.body?i.body:"",type:i.type?i.type:"",from:i.from?i.from:"",to:i.to?i.to:"",sender:a?void 0:{id:o.id._serialized?o.id._serialized:"",name:o.name?o.name:"",shortName:o.shortName?o.shortName:""},group:a?{id:o.id._serialized?o.id._serialized:"",name:o.name?o.name:"",sender:{id:r.id._serialized?r.id._serialized:"",name:r.name?r.name:"",shortName:r.shortName?r.shortName:""}}:void 0,unixTimestamp:i.timestamp?i.timestamp:0,filename:"",location:i.type===MessageTypes.LOCATION?i.location:void 0,vcards:i.type===MessageTypes.CONTACT_CARD||i.type===MessageTypes.CONTACT_CARD_MULTI?[]:void 0};if(c.type!==MessageTypes.CONTACT_CARD&&c.type!==MessageTypes.CONTACT_CARD_MULTI&&c.type!==MessageTypes.LOCATION||(c.content=""),c.type===MessageTypes.CONTACT_CARD&&c.vcards.push(vcardToJSON(i.body)),c.type===MessageTypes.CONTACT_CARD_MULTI)for(const e of i.vCards)c.vcards.push(vcardToJSON(e));if(console.log(`msg: ${JSON.stringify(c)}`),n.push(c),100===n.length){const e=JSON.stringify(n);t.connection.hub.invoke(s,"ReceiveMessages",e),n=[]}}}if(n.length>0){const e=JSON.stringify(n);t.connection.hub.invoke(s,"ReceiveMessages",e),n=[]}};module.exports={connectedHandler:connectedHandler,onSendMessageHandler:onSendMessageHandler,onBroadcastMessageHandler:onBroadcastMessageHandler,onGrabContactHandler:onGrabContactHandler,onGrabGroupHandler:onGrabGroupHandler,onGrabGroupAndMemberHandler:onGrabGroupAndMemberHandler,onArchiveChatHandler:onArchiveChatHandler,onDeleteChatHandler:onDeleteChatHandler,onGetUnreadMessageHandler:onGetUnreadMessageHandler,onDisconnectHandler:onDisconnectHandler,onLogoutHandler:onLogoutHandler};