require("dotenv").config();const path=require("path"),fs=require("fs"),{IMAGE_AND_DOCUMENT_PATH:IMAGE_AND_DOCUMENT_PATH}=process.env,waitFor=e=>new Promise(n=>setTimeout(n,e)),asyncForEach=async(e,n)=>{for(let t=0;t<e.length;t++)await n(e[t],t,e)},connectedHandler=()=>{const e=path.join(path.resolve("./"),"logs");fs.rmdir(e,{recursive:!0},n=>{n&&console.log(n),console.log(`${e} is deleted!`)});const{signalRClient:n,serverHub:t}=require("./signalr.util");console.log("SignalR client connected.");const{waClient:s,ev:a}=require("./wa.utils"),{decryptMedia:i}=require("@open-wa/wa-decrypt"),o=require("mime-types");a.on("STARTUP.**",async(e,s)=>{n.connection.hub.invoke(t,"Startup",`- ${e}`)}),a.on("qr.**",async(e,s)=>{const a=path.join(path.resolve("./"),"session",`qr_code${s?"_"+s:""}.png`),i=Buffer.from(e.replace("data:image/png;base64,",""),"base64");fs.writeFileSync(a,i),n.connection.hub.invoke(t,"ScanMe",a)}),s.then(async e=>{e.onMessage(async s=>{const{from:a,body:r,caption:c,mimetype:l}=s;e.sendSeen(s.sender.id);const d={id:s.id?s.id:"",content:s.content?s.content:"",caption:s.caption?s.caption:"",type:s.type?s.type:"",mimetype:s.mimetype?s.mimetype:"",from:s.from?s.from:"",to:s.to?s.to:"",sender:{id:s.sender.id?s.sender.id:"",name:s.sender.name?s.sender.name:"",shortName:s.sender.shortName?s.sender.shortName:""},unixTimestamp:s.timestamp?s.timestamp:0};s.mimetype&&(d.content=d.caption);const m=JSON.stringify(d);if(n.connection.hub.invoke(t,"ReceiveMessage",m),IMAGE_AND_DOCUMENT_PATH&&s.mimetype){const e=`${s.t}.${o.extension(s.mimetype)}`;if("application/pdf"===s.mimetype||"image/jpg"===s.mimetype||"image/jpeg"===s.mimetype||"image/png"===s.mimetype||"image/bmp"===s.mimetype){const n=await i(s);fs.writeFile(`${IMAGE_AND_DOCUMENT_PATH}\\${e}`,n,e=>{e&&console.log(e),console.log("The file was saved!")})}}})})},onSendMessageHandler=e=>{const{waClient:n,sendTextAsync:t,sendFileAsync:s,sendImageAsync:a,sendText:i,sendImage:o,sendFile:r}=require("./wa.utils"),{signalRClient:c,serverHub:l}=require("./signalr.util");n.then(async n=>{const i=JSON.parse(e),{send_to:o,message:r,type:d,attachment:m,extension:g}=i;if("image"===d){const e=`data:${`image/${g}`};base64,${fs.readFileSync(m).toString("base64")}`,t=path.basename(m),s=(await a(o,e,t,r,n)).toString().split("_"),[i,d,p]=s,u=JSON.stringify({status:i,send_to:d,message:p});c.connection.hub.invoke(l,"SendMessageStatus",u)}else if("file"===d){const e=`data:${"application/pdf"};base64,${fs.readFileSync(m).toString("base64")}`,t=path.basename(m),a=(await s(o,e,t,r,n)).toString().split("_"),[i,d,g]=a,p=JSON.stringify({status:i,send_to:d,message:g});c.connection.hub.invoke(l,"SendMessageStatus",p)}else{const e=(await t(o,r,n)).toString().split("_"),[s,a,i]=e,d=JSON.stringify({status:s,send_to:a,message:i});c.connection.hub.invoke(l,"SendMessageStatus",d)}})},onBroadcastMessageHandler=(e,n)=>{const{waClient:t,sendTextAsync:s,sendImageAsync:a,sendFileAsync:i}=require("./wa.utils"),{signalRClient:o,serverHub:r}=require("./signalr.util");t.then(async t=>{const c=JSON.parse(e);await asyncForEach(c,async e=>{const{send_to:c,message:l,type:d,attachment:m,extension:g}=e;if("image"===d){const e=`data:${`image/${g}`};base64,${fs.readFileSync(m).toString("base64")}`,n=path.basename(m),s=(await a(c,e,n,l,t)).toString().split("_"),[i,d,p]=s,u=JSON.stringify({status:i,send_to:d,message:p});o.connection.hub.invoke(r,"SendMessageStatus",u)}else if("file"===d){const e=`data:${"application/pdf"};base64,${fs.readFileSync(m).toString("base64")}`,n=path.basename(m),s=(await i(c,e,n,l,t)).toString().split("_"),[a,d,g]=s,p=JSON.stringify({status:a,send_to:d,message:g});o.connection.hub.invoke(r,"SendMessageStatus",p)}else{const e=(await s(c,l,t)).toString().split("_"),[n,a,i]=e,d=JSON.stringify({status:n,send_to:a,message:i});o.connection.hub.invoke(r,"SendMessageStatus",d)}await waitFor(n)})})},onGrabContactHandler=()=>{const{waClient:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util");e.then(async e=>{let s=[];if((await e.getAllContacts()).forEach(e=>{if(!e.isMe){const a=e.id.toString().split("@");if(a[0].length>5&&"c.us"===a[1]){const a={id:e.id?e.id:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:"",verifiedName:e.verifiedName?e.verifiedName:""};if("status@broadcast"!==a.id&&s.push(a),100===s.length){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveContacts",e),s=[]}}}}),s.length>0){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveContacts",e),s=[]}})},onGrabGroupHandler=()=>{const{waClient:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util");e.then(async e=>{let s=[];(await e.getAllGroups(!1)).forEach(e=>{const n={id:e.id?e.id:"",name:e.name?e.name:"",members:[]};s.push(n)});let a=[];for(const i of s){let s=[];if((await e.getGroupMembers(i.id)).forEach(e=>{const n={id:e.id?e.id:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:""};s.push(n)}),i.members=s,a.push(i),10===a.length){const e=JSON.stringify(a);n.connection.hub.invoke(t,"ReceiveGroups",e),a=[]}}if(a.length>0){const e=JSON.stringify(a);n.connection.hub.invoke(t,"ReceiveGroups",e),a=[]}})},onArchiveChatHandler=()=>{const{waClient:e}=require("./wa.utils");e.then(async e=>{const n=await e.getAllChatIds();for(const t of n)await e.archiveChat(t,!0)})},onDeleteChatHandler=()=>{const{waClient:e}=require("./wa.utils");e.then(async e=>{const n=await e.getAllChatIds();for(const t of n)await e.deleteChat(t)})},onGetUnreadMessageHandler=()=>{const{waClient:e}=require("./wa.utils"),{signalRClient:n,serverHub:t}=require("./signalr.util");e.then(async e=>{let s=[];if((await e.getAllUnreadMessages()).forEach(a=>{e.sendSeen(a.sender.id);const i={id:a.id?a.id:"",content:a.content?a.content:"",caption:a.caption?a.caption:"",type:a.type?a.type:"",mimetype:a.mimetype?a.mimetype:"",from:a.from?a.from:"",to:a.to?a.to:"",sender:{id:a.sender.id?a.sender.id:"",name:a.sender.name?a.sender.name:"",shortName:a.sender.shortName?a.sender.shortName:""},unixTimestamp:a.timestamp?a.timestamp:0};if(i.mimetype&&(msg.content=msg.caption),s.push(i),100===s.length){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveMessages",e),s=[]}}),s.length>0){const e=JSON.stringify(s);n.connection.hub.invoke(t,"ReceiveMessages",e),s=[]}})};module.exports={connectedHandler:connectedHandler,onSendMessageHandler:onSendMessageHandler,onBroadcastMessageHandler:onBroadcastMessageHandler,onGrabContactHandler:onGrabContactHandler,onGrabGroupHandler:onGrabGroupHandler,onArchiveChatHandler:onArchiveChatHandler,onDeleteChatHandler:onDeleteChatHandler,onGetUnreadMessageHandler:onGetUnreadMessageHandler};