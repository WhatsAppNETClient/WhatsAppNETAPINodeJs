require("dotenv").config();const path=require("path"),fs=require("fs"),mime=require("mime-types"),qr=require("qr-image"),{SESSION_ID:SESSION_ID,IMAGE_AND_DOCUMENT_PATH:IMAGE_AND_DOCUMENT_PATH}=process.env,waitFor=e=>new Promise(t=>setTimeout(t,e)),asyncForEach=async(e,t)=>{for(let n=0;n<e.length;n++)await t(e[n],n,e)},connectedHandler=()=>{const{client:e,SESSION_FILE_PATH:t}=require("./wa.utils"),{signalRClient:n,serverHub:o}=require("./signalr.util");console.log("SignalR client connected."),n.connection.hub.invoke(o,"Startup","- Initialize...");(async()=>{try{await e.initialize()}catch(e){console.log("initialize error ...."),n.connection.hub.invoke(o,"Startup",new String(e))}})(),e.on("authenticated",e=>{const i="- Authenticated";console.log(i),fs.writeFile(t,JSON.stringify(e),e=>{e&&console.error(e)}),n.connection.hub.invoke(o,"Startup",i)}),e.on("qr",e=>{const t="- Scan QRCode...";console.log(t);const i=path.join(path.resolve("./"),"session",`qr_code_${SESSION_ID}.png`);var s=qr.imageSync(e,{type:"png"});fs.writeFileSync(i,s),n.connection.hub.invoke(o,"Startup",t),n.connection.hub.invoke(o,"ScanMe",i)}),e.on("auth_failure",e=>{const i="- Authentication Failure\n- Session has been reset, please try again";console.log(i),console.log(`msg_failure: ${e}`),fs.rm(t,{force:!0},e=>{e&&console.log(e),console.log(`${t} is deleted!`),n.connection.hub.invoke(o,"Startup",i)})}),e.on("ready",()=>{console.log("- Ready"),n.connection.hub.invoke(o,"Startup","- Ready")}),e.on("disconnected",e=>{console.log("Client was logged out",e)}),e.on("message",async t=>{let i={};try{(i=await t.getChat()).sendSeen()}catch(e){console.log(`ex: ${e}`)}console.log(""),console.log(`type: ${t.type}`),console.log(`message: ${JSON.stringify(t)}`);let s={},a="";if(t.hasMedia&&IMAGE_AND_DOCUMENT_PATH)try{a=(s=await t.downloadMedia()).mimetype}catch(e){console.log(`ex: ${e}`)}let r={};try{r=await e.getContactById(t.from)}catch(e){console.log(`ex: ${e}`)}const c={id:`${t.id.remote}_${t.id.id}`,content:t.body?t.body:"",type:t.type?t.type:"",from:t.from?t.from:"",to:t.to?t.to:"",sender:{id:r.id._serialized?r.id._serialized:"",name:r.name?r.name:"",shortName:r.shortName?r.shortName:""},unixTimestamp:t.timestamp?t.timestamp:0,filename:t.hasMedia?`${t.timestamp}.${mime.extension(a)}`:""};if(null==IMAGE_AND_DOCUMENT_PATH&&(c.filename=""),"location"===c.type){const e={latitude:t.location.latitude,longitude:t.location.longitude,description:t.location.description?t.location.description:""};c.content=JSON.stringify(e)}const l=JSON.stringify(c);if(n.connection.hub.invoke(o,"ReceiveMessage",l),t.hasMedia&&IMAGE_AND_DOCUMENT_PATH){const{data:e}=s,t=new Buffer.from(e,"base64");fs.writeFile(`${IMAGE_AND_DOCUMENT_PATH}\\${c.filename}`,t,e=>{e&&console.log(e),console.log("The file was saved!")})}})},onSendMessageHandler=async e=>{const{client:t,sendTextAsync:n,sendImageOrFileAsync:o}=require("./wa.utils"),{signalRClient:i,serverHub:s}=require("./signalr.util"),a=JSON.parse(e),{send_to:r,message:c,type:l,attachment:d}=a;if("image"===l||"file"===l){const e=await o(r,d,c,t);console.log(`result: ${JSON.stringify(e)}`);const n=e.toString().split("_"),[a,l,g]=n,u=JSON.stringify({status:a,send_to:l,message:g});i.connection.hub.invoke(s,"SendMessageStatus",u)}else{const e=await n(r,c,t);console.log(`result: ${JSON.stringify(e)}`);const o=e.toString().split("_"),[a,l,d]=o,g=JSON.stringify({status:a,send_to:l,message:d});i.connection.hub.invoke(s,"SendMessageStatus",g)}},onBroadcastMessageHandler=async(e,t)=>{const{client:n,sendTextAsync:o,sendImageOrFileAsync:i}=require("./wa.utils"),{signalRClient:s,serverHub:a}=require("./signalr.util"),r=JSON.parse(e);await asyncForEach(r,async e=>{const{send_to:r,message:c,type:l,attachment:d}=e;if("image"===l||"file"===l){const e=await i(r,d,c,n);console.log(`result: ${JSON.stringify(e)}`);const t=e.toString().split("_"),[o,l,g]=t,u=JSON.stringify({status:o,send_to:l,message:g});s.connection.hub.invoke(a,"SendMessageStatus",u)}else{const e=await o(r,c,n);console.log(`result: ${JSON.stringify(e)}`);const t=e.toString().split("_"),[i,l,d]=t,g=JSON.stringify({status:i,send_to:l,message:d});s.connection.hub.invoke(a,"SendMessageStatus",g)}await waitFor(t)})},onGrabContactHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:n}=require("./signalr.util");let o=[];try{o=await e.getContacts()}catch(e){console.log(`ex: ${e}`)}let i=[];o.forEach(e=>{if(!e.isMe){const o=e.id._serialized.toString().split("@");if(o[0].length>5&&"c.us"===o[1]){const o={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",shortName:e.shortName?e.shortName:"",verifiedName:e.verifiedName?e.verifiedName:""};if("status@broadcast"!==o.id&&i.push(o),100===i.length){const e=JSON.stringify(i);t.connection.hub.invoke(n,"ReceiveContacts",e),i=[]}}}}),i.push({id:"status@broadcast"});const s=JSON.stringify(i);t.connection.hub.invoke(n,"ReceiveContacts",s)},onGrabGroupHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:n}=require("./signalr.util");let o=[];try{o=await e.getChats()}catch(e){console.log(`ex: ${e}`)}let i=[];o.forEach(e=>{if(e.isGroup){let t=[];e.groupMetadata.participants.forEach(e=>{const n={id:e.id._serialized?e.id._serialized:"",name:"",shortName:""};t.push(n)});const n={id:e.id._serialized?e.id._serialized:"",name:e.name?e.name:"",members:t};i.push(n)}});let s=[];for(const o of i){for(const t of o.members)try{const n=await e.getContactById(t.id);t.name=n.name?n.name:"",t.shortName=n.shortName?n.shortName:""}catch(e){console.log("onGrabGroupHandler error ...."),console.log(`ex: ${e}`)}if(s.push(o),1===s.length){const e=JSON.stringify(s);t.connection.hub.invoke(n,"ReceiveGroups",e),s=[]}}s.push({id:"status@broadcast"});const a=JSON.stringify(s);t.connection.hub.invoke(n,"ReceiveGroups",a)},onArchiveChatHandler=async()=>{const{client:e}=require("./wa.utils"),t=await e.getChats();for(const e of t)await e.archive()},onDeleteChatHandler=async()=>{const{client:e}=require("./wa.utils"),t=await e.getChats();for(const e of t)await e.delete()},onGetUnreadMessageHandler=async()=>{const{client:e}=require("./wa.utils"),{signalRClient:t,serverHub:n}=require("./signalr.util"),o=await e.getChats();let i=[];for(const s of o)if(s.sendSeen(),s.unreadCount>0){const o=await s.fetchMessages({limit:s.unreadCount});for(const s of o){const o=await e.getContactById(s.from),a={id:`${s.from}_${s.id.id}`,content:s.body?s.body:"",type:s.type?s.type:"",from:s.from?s.from:"",to:s.to?s.to:"",sender:{id:o.id._serialized?o.id._serialized:"",name:o.name?o.name:"",shortName:o.shortName?o.shortName:""},unixTimestamp:s.timestamp?s.timestamp:0,filename:""};if(i.push(a),100===i.length){const e=JSON.stringify(i);t.connection.hub.invoke(n,"ReceiveMessages",e),i=[]}}}if(i.length>0){const e=JSON.stringify(i);t.connection.hub.invoke(n,"ReceiveMessages",e),i=[]}};module.exports={connectedHandler:connectedHandler,onSendMessageHandler:onSendMessageHandler,onBroadcastMessageHandler:onBroadcastMessageHandler,onGrabContactHandler:onGrabContactHandler,onGrabGroupHandler:onGrabGroupHandler,onArchiveChatHandler:onArchiveChatHandler,onDeleteChatHandler:onDeleteChatHandler,onGetUnreadMessageHandler:onGetUnreadMessageHandler};